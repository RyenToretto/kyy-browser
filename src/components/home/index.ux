<template>
  <div class="page-container">
    <search-bar></search-bar>
    <tabs onchange="changeTab">
      <underline-tab-bar
        tab-list="{{tabList}}"
        selected-tab="{{selectedTab}}"
        mode="scrollable"
      ></underline-tab-bar>
      <tab-content class="tab-content">
        <div for={{tabList}}>
          <article-list
            list="{{hot.list}}"
            show-rank="{{true}}"
            show-load="{{hot.load}}"
            onload-more="queryHotList"
            if="{{selectedTab === $idx}}"
          >
          </article-list>
        </div>
      </tab-content>
    </tabs>
  </div>
</template>

<import name="search-bar" src="../common/bar/search-bar"></import>
<import name="underline-tab-bar" src="../common/tab/underline-tab-bar"></import>
<import name="article-list" src="../common/list/article-list"></import>

<script>
export default {
  props: [],
  data: {
    tabList: [],
    selectedTab: 0,
    category: "",
    hot: {
      list: [],
      pageNo: 1,
      pageSize: 10,
      total: null,
      load: true
    },
    header: {
      deviceId: "",
      token: "",
    }
  },
  onInit() {
     // 获取设备id
    $utils.getStorage('deviceId').then(value => {
      this.header.deviceId = value;
    })
    // 判断是否登录状态
    $utils.getStorage('token').then(value => {
      this.header.token = value;
    })
    
  },
  onReady() {
    this.getArticleType();
  },
  changeTab(e) {
    let index = e.index || 0
    this.selectedTab = index;
    if(this.selectedTab == 0){
       if(this.tabList.length >0){
          this.getArticleList(this.tabList[0]);
       }
    }else {
       for(let i = 0; i< this.tabList.length;i++){
       if( i == index){
         this.category = this.tabList[i];
       }
    }
    this.getArticleList(this.category);
    }
   
  },
  queryHotList(pageNo,) {
    if (!isNaN(pageNo) && pageNo !== this.hot.pageNo) {
      return
    }
    // 延时接口请求
    setTimeout(() => {
      this.queryFn()
    }, 100)
  },
  queryFn() {
    /* 
    根据pageNo查询列表
    由接口返回数据，并将数据push到list
    */
    this.hot.pageNo++;
    let para = new Object();
    para.page = this.hot.pageNo;
    for(let i = 0; i< this.tabList.length; i++){
       if(i == this.selectedTab){
         para.category = this.tabList[i];
       }
    }
    $apis.common.getArticlesList(para, this.header).then((res) => {
       let data = JSON.parse(res.data);
       if(data.code == 0){
         this.hot.pageNo = data.page;
         this.hot.load = data.hasMore;
        //  this.hot.list.concat(data.articles);
         for(let key of data.articles){
             this.hot.list.push(key)
         }
       }
    })
  },
  // 资讯分类
  getArticleType() {
    $apis.common.getArticleType({},this.header).then((res) => {
      let data = JSON.parse(res.data);
       this.tabList = data.data;
        this.getArticleList(this.tabList[0]);
    })
  },
  // 资讯列表
  getArticleList(val) {
    let para = new Object();
    para.page = this.hot.pageNo;
    para.category = val;
    $apis.common.getArticlesList(para, this.header).then((res) => {
       let data = JSON.parse(res.data);
       if(data.code == 0){
         this.hot.pageNo = data.page;
         this.hot.load = data.hasMore;
         this.hot.list = data.articles;
       }
    })
  },
}
</script>

<style lang="less">
@import '../../assets/styles/index.less';
</style>
