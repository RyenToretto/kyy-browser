<template>
  <div class="page-wrapper">
    <search-input-bar onsearch="search"></search-input-bar>
    <div class="search-hot">
      <div class="hot-wordlist" style="margin:10px 0"  if="{{hotWordList.length}}">
        <text class="hotlist-item">热搜词:</text>
        <text class="hotlist-item" for="hotWordList" @click="toHotWord($item)">{{$item}}</text>
      </div>
      <text if="{{hotList.length}}" style="margin:10px 0">搜索历史</text>
      <div class="hot-list">
        <text class="hot-item" for="hotList" @click="toSearch($item)">{{
          $item.title | ellipsis
        }}</text>
      </div>
      <div class="search-title" if="{{hotList.length}}">
        <div class="search-refresh" @click="delHostList">
          <image class="img" src="../../assets/images/del-history.png"></image>
        </div>
      </div>
      <div class="adimg-box" if="{{dialog}}">
        <div class="close" @click="closeDialog">
          <image class="c-img" src="../../assets/images/dialong.png"></image>
        </div>
        <div @click="openUrl" class="adImg">
          <image class="img" src="{{adData.picture}}"></image>
        </div>
      </div>
    </div>
  </div>
</template>

<import name="search-input-bar" src="../../components/common/bar/search-input-bar"></import>
<script>
import router from '@system.router'
import ad from '@service.ad'
import pkg from '@system.package'
export default {
  private: {
    searchText: '',
    searchEngineId: '',
  },
  public: {
    dialog: false,
    hotList: [],
    category: '插屏',
    scene: '其它',
    adData: '',
    header: {
      deviceId: "",
      token: "",
    },
    hotWordList: "",
  },
  onInit() {
    // 获取搜索引擎id
    $utils.getStorage('searchEngineId').then(value => {
      this.searchEngineId = JSON.parse(value);

    })
    // 获取设备id
    $utils.getStorage('deviceId').then(value => {
      this.header.deviceId = value;

      this.getAd();
      this.getHotWord();
    })
    // 判断是否登录状态
    $utils.getStorage('token').then(value => {
      this.header.token = value;
    })
    this.getSearchHistory()

  },
  getSearchHistory() {
    // 获取搜索历史
    $utils.getStorage('searchHistory').then(value => {
      this.hotList = JSON.parse(value);
    })
  },
  search(info) {
    console.log(info.detail);
    if(info.detail == "http://" || info.detail == "https://" ){
        let searchUrl = this.searchEngineId[0].url;
        $utils.route2theUrl('pages/search-detail', { searchText: searchUrl });
    }else{
       this.searchText = info.detail
    }
   
  },
  delHostList() {
    $utils.deleteStorage('searchHistory');
    this.hotList = [];
  },
  toSearch(val) {
     $utils.route2theUrl('pages/search-detail', { searchText: val.url });
    // let para = new Object();
    // para.keyword = val;
    // para.searchEngineId = this.searchEngineId[0].id;
    // $apis.common.getSearchLog(para).then((res) => {
    //   let data = JSON.parse(res.data);
    //   if (data.code == 0) {
    //     $utils.route2theUrl('pages/search-detail',{item: data.data, searchText: val});
    //   } else {
    //   prompt.showToast({
    //       message: data.message
    //     })
    //   }
    // })
  },
  toHotWord(val){
    console.log(this.searchEngineId)
    let searchUrl = this.searchEngineId[0].url;
    let url = searchUrl.replace('%s',val);
     $utils.route2theUrl('pages/search-detail', { searchText: url });
  },
  getHotWord(){
    $apis.common.getHotWordList({}, this.header).then((res) => {
      let data = JSON.parse(res.data);
      if (data.code == 0) {
         this.hotWordList = data.data;
      } else {
      prompt.showToast({
          message: data.message
        })
      }
    })
  },
  // 获取广告
  getAd() {
    let para = new Object();
    para.category = this.category;
    para.scene = this.scene;
    $apis.common.getAd(para, this.header).then((res) => {
      let data = JSON.parse(res.data);
      if (data.code == 0) {
        if (data.ad) {
          this.dialog = true;
          this.adData = data.ad;
          this.getAllAd("open");
        }

      } else {
        prompt.showToast({
          message: data.message
        })
      }
    })
  },
  // 广告跳转
  openUrl() {
    let _this = this;
    pkg.hasInstalled({
      package: _this.adData.packageName,
      success: function (data) {
        if (data.result == true) {
          router.push({
            uri: _this.adData.link
          })
        }else{
            router.push({
            uri: _this.adData.fallbackLink
          })
        }
         _this.getAllAd("click");
      },
    })
  },
  // 广告点击，展示加载完请求的事件
  getAllAd(val) {
    let para = new Object();
    para.id = this.adData.id;
    if (val == "open") {
      para.opt = 0;
    } else if (val == "click") {
      para.opt = 1;
    }
    $apis.common.getAdOpt(para, this.header).then((res) => {
      let data = JSON.parse(res.data);
      if (data.code != 0) {
        prompt.showToast({
          message: data.message
        })
      }
    })
  },
  // 关闭弹窗
  closeDialog() {
    if (this.adData.openOnClose == true) {
      this.getAllAd("click");
      router.push({
        uri: this.adData.link
      })
    }
    this.dialog = false;
  },
  ellipsis(value) {
    if (!value) return ''
    if (value.length > 40) {
      return value.slice(0, 40) + '...'
    }
    return value
  },

}
</script>

<style lang="less">
@import '../../assets/styles/index.less';
.page-wrapper {
  background-color: #fff;
}
.search-hot {
  padding: 20px 30px;
  width: 100%;
  .flex-box-mixins(column, flex-start, flex-start);
  .search-title {
    width: 100%;
    margin-bottom: 30px;
    justify-content: flex-end;
    .img {
      width: 40px;
      height: 40px;
    }
  }
  .hot-list {
    width: 100%;
    flex-wrap: wrap;
  }
  .hot-item {
    height: 70px;
    align-items: center;
    background-color: #f7f8fb;
    border-radius: 44px;
    font-size: 26px;
    color: #000;
    padding: 0px 20px;
    text-align: center;
    border-radius: 30px;
    margin: 10px 40px 10px 0;
  }
  .adimg-box {
    width: 100%;
    padding: 0px 60px;
    position: fixed;
    bottom: 100px;
    .flex-box-mixins(column, center, center);
    .close {
      width: 90%;
      margin-top: 20px;
      .flex-box-mixins(column, flex-end, flex-end);
      .c-img {
        width: 50px;
        height: 50px;
      }
    }
    .adImg {
       .flex-box-mixins(column, center, center);
       width: 400px;
       height: 400px;

      .img {
        width: 100%;
      }
    }
  }
  .hot-wordlist{
    width: 100%;
    flex-wrap: wrap;
    .hotlist-item{
       height: 50px;
       padding-right: 20px; 
    }
  }
}
</style>
