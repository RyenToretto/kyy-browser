
<import name="list" src="../../components/list"></import>

<template>
  <div class="page-wrapper">
    <!-- 底部菜单 -->
    <list onemit-evt="emitEvt" websrc={{websrc}}></list>
    <div class="bottom">
      <div class="b-box" @click="getRouterIndex()">
        <image src="../../assets/images/index/index.png"></image>
      </div>
      <div class="b-box" @click="testin()">
        <image src="../../assets/images/index/info-active.png"></image>
      </div>
      <div class="b-box" @click="getRouterCollect()">
        <image src="../../assets/images/index/collect.png"></image>
      </div>
      <div class="b-box" @click="getPopup()">
        <image src="../../assets/images/index/set.png"></image>
      </div>
    </div>
    <!--弹窗登录 -->
    <div class="test" if="{{showContent}}" onclick="stopPropagation()">
      <div class="maskBox" @click="closeBox"></div>
      <div class="model translateYByEntry">
        <div class="popupBottom">
          <div class="avatar-box">
            <div class="avatar-img">
              <image src="{{defaultAvatar}}"></image>
            </div>
            <div class="login-btn">
              <text class="login-title" if="{{logined}}">已登录</text>
              <text class="login-title" else @click="login">点击登录</text>
              <text class="login-btn-title">欢迎使用XX浏览器</text>
            </div>
            <text class="btn" if="{{addFlag}}">已加入桌面</text>
            <text class="btn" else @click="addShortCut">加入桌面</text>
          </div>
          <div class="menu">
            <div class="menu-item" @click="getRouter('dol')">
              <image src="../../assets/images/index/download.png"> </image>
              <text>下载管理</text>
            </div>
            <div class="menu-item" @click="addCollection">
              <image src="../../assets/images/index/collect-1.png"></image>
              <text>添加收藏</text>
            </div>
            <div class="menu-item" @click="getRouter('history')">
              <image src="../../assets/images/index/history.png"></image>
              <text>历史记录</text>
            </div>
            <div class="menu-item" @click="openDialog">
              <image src="../../assets/images/index/complaint.png"></image>
              <text>投诉反馈</text>
            </div>
            <div class="menu-item" @click="getRouter('set')">
              <image src="../../assets/images/index/set-btn.png"></image>
              <text>设置</text>
            </div>
            <div class="menu-item" @click="refresh">
              <image src="../../assets/images/index/refresh.png"></image>
              <text>刷新</text>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- 反馈 -->
    <feedback if="{{feedbackDailog}}" @close="closeFeedback"></feedback>
  </div>
</template>
<import  name="feedback" src="../../components/feedback/index"></import>
<script>
import router from '@system.router'
import prompt from '@system.prompt'
import shortcut from '@system.shortcut'
export default {
  data: {
    logined: false,
    translateY: '',
    showContent: false,
    feedbackDailog: false,
    addFlag: false,
    defaultAvatar: require('../../assets/images/index/default-avatar.png'),
    navs: "",
    addCollectionData: "",
    header: {
      deviceId: "",
      token: "",
    },
    message: "",
    websrc: "",

  },
  onInit() {
    let url = JSON.parse(this.nav)
    this.websrc = url[0].url;
    this.showContent = false;
    $utils.getStorage('deviceId').then(value => {
      this.header.deviceId = value;
    })
    // 判断是否登录状态
    $utils.getStorage('token').then(value => {
      this.header.token = value;
    })
  },
  onReady() {
    this.navs = this.nav;
    this.getToken();
    // 判断是否登录状态
    // $utils.getStorage('token').then(value => {
    //   this.logined = true;
    // })
    // 是否加入桌面图标
    $utils.getStorage('addFlag').then(value => {
      if (JSON.parse(value) == true) {
        this.addFlag = true;
      } else {
        this.addFlag = false;
      }

    })
  },
  // 判断是否登录状态
  async getToken() {
    await $utils.getStorage('token').then(value => {
      this.logined = true;
    })
  },
  //弹出底部 
  getPopup() {
    this.showContent = true;
  },
  // 关闭底部弹窗
  closeBox() {
    this.showContent = false;
  },
  closeFeedback() {
    this.feedbackDailog = false;
  },
  openDialog() {
    this.showContent = false;
    this.feedbackDailog = true;
  },
  // 资讯跳转路由
  getRouterIndex() {
    router.push({
      uri: '/pages/index'
    })
    this.showContent = false;
  },
  onCancel() { },
  testin() {
    return false;
  },
  getRouterCollect() {
    router.push({
      uri: 'pages/collection'
    })
  },
  // 菜单跳转
  getRouter(type) {
    this.showContent = false;
    switch (type) {
      case 'dol':
        $utils.route2theUrl('pages/download');
        break;
      case 'history':
        $utils.route2theUrl('pages/history')
        break;
      case 'set':
        $utils.route2theUrl('pages/set', { logined: this.logined })
        break;
      default:
        break;
    }
  },
  // 登录
  login() {
    router.push({
      uri: 'pages/login'
    });
    this.showContent = false;
  },
  // 阻止事件冒泡
  stopPropagation() {
  },
  // 刷新
  refresh() {
    prompt.showToast({
      message: "刷新成功"
    });
    this.showContent = false;
  },
  // 加入桌面
  addShortCut() {
    let _this = this;
    shortcut.install({
      success: function (data) {
        _this.addFlag = true;
        _this.showContent = false;
        $utils.setStorage('addFlag', true);
      },
      fail: function (errmsg, errcode) {
      }
    })
  },
  // 添加收藏
  addCollection() {
    let para = new Object();
    para.title = this.message.title;
    para.url = this.message.url;
    $apis.common.addFavorite(para, this.header).then((res) => {
      let data = JSON.parse(res.data);
      if (data.code == 0) {
        prompt.showToast({
          message: '添加成功'
        });
      } else {
        prompt.showToast({
          message: data.message
        })
      }
      this.showContent = false;
    })
  },
  emitEvt(evt) {
    this.message = evt.detail
  }
}
</script>

<style lang="less">
@import '../../assets/styles/index.less';
.page-wrapper {
  height: 100%;
  .bottom {
    z-index: 99999;
    text-align: center;
    position: fixed;
    bottom: 0;
    width: 100%;
    z-index: 9999;
    height: 120px;
    z-index: 999;
    background-color: #fff;
    border-top: 1px solid rgba(149, 149, 149, 0.2);
    display: flex;
    justify-content: space-between;
    align-items: center;
    .b-box {
      width: 100%;
      height: 100%;
      align-items: center;
      justify-content: center;
      image {
        /* width: 45px;
       height: 100%; */
        margin: 0px 50px;
      }
    }
  }
}
.popupBottom {
  .flex-box-mixins(column, space-between, space-between);
  width: 100%;
  padding: 20px;
  .avatar-box {
    width: 100%;
    justify-content: space-between;
    align-items: center;
    flex-direction: row;
    padding: 40px 40px 20px 0;
    margin: 0px 30px;
    .avatar-img {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      image {
        width: 100%;
        height: 100%;
        margin: 0;
      }
    }
    .login-btn {
      .flex-box-mixins(column, flex-start, flex-start);
      text-align: right;
      width: 40%;
      .login-title {
        font-size: 30px;
        font-weight: 600;
        color: #000;
        line-height: 60px;
      }
      .login-btn-title {
        font-size: 20px;
        font-weight: 400;
        color: #999999;
      }
    }
    .btn {
      width: 200px;
      background-color: #567aff;
      border-radius: 50px;
      color: #fff;
      height: 80px;
      line-height: 80px;
      font-size: 30px;
      text-align: center;
    }
  }
  .menu {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    font-size: 24px;
    font-weight: 400;
    color: #2c2c2c;
    image {
      width: 70px;
      height: 70px;
    }
    .menu-item {
      flex-direction: column;
      justify-content: center;
      align-items: center;
      width: 25%;
      margin: 20px 0;
      text-align: center;
    }
  }
}
@keyframes translateYByEntry {
  from {
    transform: translateY(0px);
  }
  to {
    transform: translateY(-700px);
  }
}
@keyframes translateYByLeave {
  from {
    transform: translateY(-700px);
  }
  to {
    transform: translateY(0);
  }
}
.translateYByEntry {
  animation-name: translateYByEntry;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
}
.translateYByLeave {
  animation-name: translateYByLeave;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
}
.test {
  z-index: 9999;
  width: 100%;
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.4);
  padding-bottom: 700px;
  .model {
    width: 100%;
    height: 600px;
    position: fixed;
    left: 0;
    bottom: -700px;
    border-top-left-radius: 40px;
    border-top-right-radius: 40px;
    background-color: #ffffff;
    display: flex;
    flex-direction: column;
    .btn {
      flex-direction: column;
      justify-content: center;
      align-items: center;
      .img {
        width: 80px;
        height: 80px;
      }
    }
  }
  .maskBox {
    width: 100%;
    height: 100%;
  }
}
</style>
